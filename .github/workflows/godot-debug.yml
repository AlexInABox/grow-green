name: "Godot Debug"
on:
  workflow_dispatch:
      inputs:
        question:
          description: 'Alexx on top?'
          required: false
          default: 'YESSS'
          type: choice
          options:
            - 'YESSS'
            - 'nuUh!'
          
env:
  GODOT_VERSION: 4.3
  GODOT_PROJECT_LOCATION: project.godot
  EXPORT_FOLDER_LINUX: bin/Linux
  EXPORT_FOLDER_MACOS: bin/MacOS
  EXPORT_FOLDER_WINDOWS: bin/Windows
  APPLICATION_NAME: GrowGreen

jobs:
  GODOT_Build:
    runs-on: ubuntu-latest
    container:
        image: archlinux:latest
    steps:
        - name: Check out the repository
          uses: actions/checkout@v4
    
        - name: Setting extra variables
          run: |
            echo "DATE=$(date + '%Y-%m-%d')" >> $GITHUB_ENV
            echo "MAIN_FOLDER=$(pwd)" >> $GITHUB_ENV

        - name: Installing Dependencies
          run: pacman -Syu --noconfirm git bash yasm python python-pip wget unzip tar mingw-w64 fontconfig

        - name: Set permissions
          run: chmod -R 777 .

        - name: Prepare Godot 4
          run: |
            wget -q -O godot_linux.zip https://github.com/godotengine/godot/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_mono_linux_x86_64.zip
            unzip godot_linux.zip
            wget -q -O godot_export_templates.tpz https://github.com/godotengine/godot-builds/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_export_templates.tpz
            mkdir -p ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable
            unzip godot_export_templates.tpz -d ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable
            mv ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable/templates/* ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable/

        - name: Building Linux
          run: |
            mkdir -p ${{ env.EXPORT_FOLDER_LINUX }}
            ./Godot_v${{ env.GODOT_VERSION }}-stable_mono_linux.x86_64 --import ${{ env.GODOT_PROJECT_LOCATION }} --quiet --headless --export-debug Linux ${{ env.MAIN_FOLDER }}/${{ env.EXPORT_FOLDER_LINUX }}/${{ env.APPLICATION_NAME }}.x86_64
            chmod +x ${{ env.EXPORT_FOLDER_LINUX }}/${{ env.APPLICATION_NAME }}.sh
            chmod +x ${{ env.EXPORT_FOLDER_LINUX }}/${{ env.APPLICATION_NAME }}.x86_64
        - name: Tar files
          run: tar -cvf ${{ env.APPLICATION_NAME }}_linux_debug_${{ env.DATE }}.tar ${{ env.EXPORT_FOLDER_LINUX }}

        - name: Upload Linux Artifact
          uses: actions/upload-artifact@v4
          with:
            name: ${{ env.APPLICATION_NAME }}_linux_debug_${{ env.DATE }}.tar
            path: ${{ env.APPLICATION_NAME }}_linux_debug_${{ env.DATE }}.tar



        - name: Building Windows
          run: |
            mkdir -p ${{ env.EXPORT_FOLDER_WINDOWS }}
            ./Godot_v${{ env.GODOT_VERSION }}-stable_mono_linux.x86_64 --import ${{ env.GODOT_PROJECT_LOCATION }} --quiet --headless --export-debug "Windows Desktop" ${{ env.MAIN_FOLDER }}/${{ env.EXPORT_FOLDER_WINDOWS }}/${{ env.APPLICATION_NAME }}.exe

        - name: Upload Windows Artifact
          uses: actions/upload-artifact@v4
          with:
            name: ${{ env.APPLICATION_NAME }}_windows_debug_${{ env.DATE }}
            path: ${{ env.EXPORT_FOLDER_WINDOWS }}/


        - name: Building MacOS
          run: |
            mkdir -p ${{ env.EXPORT_FOLDER_MACOS }}
            ./Godot_v${{ env.GODOT_VERSION }}-stable_mono_linux.x86_64 --import ${{ env.GODOT_PROJECT_LOCATION }} --quiet --headless --export-debug "macOS" ${{ env.MAIN_FOLDER }}/${{ env.EXPORT_FOLDER_MACOS }}/${{ env.APPLICATION_NAME }}.app

        - name: Upload MacOS Artifact
          uses: actions/upload-artifact@v4
          with:
            name: ${{ env.APPLICATION_NAME }}_macos_debug_${{ env.DATE }}
            path: ${{ env.EXPORT_FOLDER_MACOS }}/
